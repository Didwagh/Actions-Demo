name: Modify AnkiDroid NoteEditorFragment

on: push

jobs:
  modify-ankidroid:
    runs-on: ubuntu-latest
    
    steps:
    - name: Clone AnkiDroid repository
      run: |
        git clone https://github.com/ankidroid/Anki-Android.git
        cd Anki-Android
        
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      with:
        api-level: 33
        build-tools: 33.0.0
        
    - name: Backup original file
      run: |
        cd Anki-Android
        cp AnkiDroid/src/main/java/com/ichi2/anki/NoteEditorFragment.kt AnkiDroid/src/main/java/com/ichi2/anki/NoteEditorFragment.kt.backup
        
    - name: Modify NoteEditorFragment.kt
      run: |
        cd Anki-Android
        
        # Create the modified function content
        cat > modified_function.kt << 'EOF'
        private fun closeNoteEditor(intent: Intent = Intent()) {
            val result: Int = if (changed) Activity.RESULT_OK else RESULT_CANCELED
            
            if (reloadRequired) {
                intent.putExtra(RELOAD_REQUIRED_EXTRA_KEY, true)
            }
            if (changed) {
                intent.putExtra(NOTE_CHANGED_EXTRA_KEY, true)
                
                lifecycleScope.launch {
                    val textToSend = editFields.joinToString("\n") { it.text.toString() }
                    
                    try {
                        withContext(Dispatchers.IO) {
                            val client = OkHttpClient()
                            
                            val requestBody = """
                                {
                                  "contents": [
                                    {
                                      "parts": [
                                        { "text": "${textToSend.replace("\"", "\\\"")}" }
                                      ]
                                    }
                                  ]
                                }
                            """.trimIndent()
                            
                            val request = Request.Builder()
                                .url("https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=AIzaSyAeNoHzS6zrvBtzYVfMDGiFwUtLYAipczU")
                                .post(requestBody.toRequestBody("application/json".toMediaType()))
                                .build()
                            
                            client.newCall(request).execute().use { response ->
                                val body = response.body?.string()
                                if (!response.isSuccessful || body == null) {
                                    throw IOException("Unexpected code $response\nBody: $body")
                                }
                                
                                val text = JSONObject(body)
                                    .getJSONArray("candidates")
                                    .getJSONObject(0)
                                    .getJSONObject("content")
                                    .getJSONArray("parts")
                                    .getJSONObject(0)
                                    .getString("text")
                                
                                withContext(Dispatchers.Main) {
                                    Toast.makeText(
                                        requireContext(),
                                        "Gemini: $text",
                                        Toast.LENGTH_LONG
                                    ).show()
                                }
                            }
                        }
                    } catch (e: Exception) {
                        e.printStackTrace()
                        withContext(Dispatchers.Main) {
                            Toast.makeText(requireContext(), "Gemini error: ${e.message}", Toast.LENGTH_LONG).show()
                        }
                    }
                }
            }
            setResult(result, intent)
            requireActivity().finish()
        }
        EOF
        
        # Use Python to replace the function
        python3 << 'EOF'
        import re
        import sys
        
        # Read the original file
        with open('AnkiDroid/src/main/java/com/ichi2/anki/NoteEditorFragment.kt', 'r') as f:
            content = f.read()
        
        # Read the new function
        with open('modified_function.kt', 'r') as f:
            new_function = f.read()
        
        # Find and replace the original function
        # Pattern to match the original function (handles various formatting)
        pattern = r'private\s+fun\s+closeNoteEditor\s*\([^)]*\)\s*\{[^}]*\}'
        
        # Replace with new function
        modified_content = re.sub(pattern, new_function.strip(), content, flags=re.DOTALL)
        
        # Write back to file
        with open('AnkiDroid/src/main/java/com/ichi2/anki/NoteEditorFragment.kt', 'w') as f:
            f.write(modified_content)
        
        print("Function replacement completed")
        EOF
        
    - name: Add required imports
      run: |
        cd Anki-Android
        
        # Add missing imports at the top of the file
        python3 << 'EOF'
        import re
        
        with open('AnkiDroid/src/main/java/com/ichi2/anki/NoteEditorFragment.kt', 'r') as f:
            content = f.read()
        
        # List of imports to add if not present
        required_imports = [
            'import okhttp3.OkHttpClient',
            'import okhttp3.Request',
            'import okhttp3.RequestBody.Companion.toRequestBody',
            'import okhttp3.MediaType.Companion.toMediaType',
            'import kotlinx.coroutines.Dispatchers',
            'import kotlinx.coroutines.withContext',
            'import kotlinx.coroutines.launch',
            'import androidx.lifecycle.lifecycleScope',
            'import android.widget.Toast',
            'import org.json.JSONObject',
            'import java.io.IOException',
            'import android.app.Activity'
        ]
        
        # Find the package declaration
        package_match = re.search(r'^package\s+[^\n]+', content, re.MULTILINE)
        if package_match:
            insert_pos = package_match.end()
            
            # Check which imports are missing
            missing_imports = []
            for imp in required_imports:
                if imp not in content:
                    missing_imports.append(imp)
            
            if missing_imports:
                # Insert missing imports after package declaration
                import_block = '\n\n' + '\n'.join(missing_imports)
                content = content[:insert_pos] + import_block + content[insert_pos:]
                
                with open('AnkiDroid/src/main/java/com/ichi2/anki/NoteEditorFragment.kt', 'w') as f:
                    f.write(content)
                
                print(f"Added {len(missing_imports)} missing imports")
            else:
                print("All imports already present")
        else:
            print("Could not find package declaration")
        EOF
        
    - name: Add OkHttp dependency to build.gradle
      run: |
        cd Anki-Android
        
        # Add OkHttp dependency if not present
        if ! grep -q "implementation.*okhttp3" AnkiDroid/build.gradle; then
            # Find dependencies block and add OkHttp
            sed -i '/dependencies {/a\    implementation "com.squareup.okhttp3:okhttp:4.12.0"' AnkiDroid/build.gradle
            echo "Added OkHttp dependency"
        else
            echo "OkHttp dependency already exists"
        fi
        
    - name: Verify changes
      run: |
        cd Anki-Android
        echo "=== Changes made to NoteEditorFragment.kt ==="
        
        # Show the modified function
        echo "Modified closeNoteEditor function:"
        grep -A 50 "private fun closeNoteEditor" AnkiDroid/src/main/java/com/ichi2/anki/NoteEditorFragment.kt || echo "Function not found"
        
        echo -e "\n=== Build.gradle changes ==="
        grep -n "okhttp" AnkiDroid/build.gradle || echo "OkHttp dependency not found"
        
    - name: Create patch file
      run: |
        cd Anki-Android
        git diff > ../ankidroid-modifications.patch
        
    - name: Upload modified files as artifact
      uses: actions/upload-artifact@v4
      with:
        name: modified-ankidroid
        path: |
          Anki-Android/AnkiDroid/src/main/java/com/ichi2/anki/NoteEditorFragment.kt
          Anki-Android/AnkiDroid/build.gradle
          ankidroid-modifications.patch
          
    - name: Try to build (optional)
      run: |
        cd Anki-Android
        echo "Attempting to build..."
        ./gradlew assemblePlayDebug --stacktrace || echo "Build failed - this is expected due to missing dependencies in CI environment"